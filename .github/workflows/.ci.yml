name: ci
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.event.head_commit.author.name != 'actions'
    outputs:
      react_envs_version: ${{ steps.step1.outputs.out2 }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
      - run: yarn --frozen-lockfile
      - run: yarn build-gha
      - uses: actions/upload-artifact@v2
        with:
          name: build
          path: build

  check_if_version_upgraded:
    name: Check if version upgrade
    runs-on: ubuntu-latest
    needs: build
    outputs:
      from_version: ${{ steps.step1.outputs.from_version }}
      to_version: ${{ steps.step1.outputs.to_version }}
      is_upgraded_version: ${{ steps.step1.outputs.is_upgraded_version }}
    steps:
      - uses: garronej/github_actions_toolkit@v2.2
        id: step1
        with:
          action_name: is_package_json_version_upgraded

  docker:
    needs:
      - check_if_version_upgraded
      - build
    runs-on: ubuntu-latest
    # We publish the the docker image only if it's a push on the default branch or if it's a PR from a
    # branch (meaning not a PR from a fork). It would be more straightforward to test if secrets.DOCKERHUB_TOKEN is
    # defined but GitHub Action don't allow it.
    if: |
      github.event_name == 'push' || 
      github.event.pull_request.head.repo.owner.login == github.event.pull_request.base.repo.owner.login
    steps:
      - uses: actions/checkout@v2
      - uses: docker/setup-qemu-action@v1
      - uses: docker/setup-buildx-action@v1
      - uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Computing Docker image tags
        id: step1
        env:
          IS_UPGRADED_VERSION: ${{ needs.check_if_version_upgraded.outputs.is_upgraded_version }}
          TO_VERSION: ${{ needs.check_if_version_upgraded.outputs.to_version }}
        run: |
          OUT=$GITHUB_REPOSITORY:$(
          [ "$GITHUB_EVENT_NAME" == "pull_request" ] &&
            echo "$GITHUB_HEAD_REF" ||
            echo "${GITHUB_REF#refs/*/}"
          )
          if [ "$IS_UPGRADED_VERSION" = "true" ]; then
            OUT=$OUT,$GITHUB_REPOSITORY:$TO_VERSION,$GITHUB_REPOSITORY:latest
          fi
          OUT=$(echo "$OUT" | awk '{print tolower($0)}') 
          echo ::set-output name=docker_tags::$OUT
      - run: echo "{\"version\":\"$VER\"}" > re.json
        env:
          VER: ${{ needs.build.outputs.react_envs_version }}
      - uses: actions/download-artifact@v2
        with:
          name: build
          path: build
      - run: tar -cvf build.tar ./build
      - uses: docker/build-push-action@v2
        with:
          push: true
          context: .
          tags: ${{ steps.step1.outputs.docker_tags }}
          file: Dockerfile.ci

  update_changelog:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'push' &&
      needs.check_if_version_upgraded.outputs.is_upgraded_version == 'true'
    needs:
      - docker
    steps:
      - uses: garronej/github_actions_toolkit@v2.2
        with:
          action_name: update_changelog
          branch: ${{ github.ref }}
          commit_author_email: actions@github.com

  release:
    runs-on: ubuntu-latest
    needs:
      - update_changelog
      - check_if_version_upgraded
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.ref }}
      - name: Build GitHub release body
        id: step1
        run: |
          if [ "$FROM_VERSION" = "0.0.0" ]; then
              echo "::set-output name=body::ðŸš€"
          else
              echo "::set-output name=body::ðŸ“‹ [CHANGELOG](https://github.com/$GITHUB_REPOSITORY/blob/v$TO_VERSION/CHANGELOG.md)"
          fi
        env:
          FROM_VERSION: ${{ needs.check_if_version_upgraded.outputs.from_version }}
          TO_VERSION: ${{ needs.check_if_version_upgraded.outputs.to_version }}
      - uses: garronej/action-gh-release@v0.2.0
        with:
          name: Release v${{ needs.check_if_version_upgraded.outputs.to_version }}
          tag_name: v${{ needs.check_if_version_upgraded.outputs.to_version }}
          target_commitish: ${{ github.ref }}
          body: ${{ steps.step1.outputs.body }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
